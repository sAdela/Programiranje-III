#include<iostream>
#include<regex>
#include<vector>
#include<string>
#include<algorithm>
using namespace std;
enum Predmeti { Matematika, Historija, Geografia, Hemija, Biologija, Engleski, Muzicko, Fizicko };
enum Razredi { I1, I2, I3, II1, II2, II3, III1, III2, III3, IV1, IV2, IV3 };
const char * ispisPredmeti[] = { "Matematika", "Historija", "Geografia", "Hemija", "Biologija", "Engleski", "Muzicko", "Fizicko" };
const char * ispisRazredi[] = { "I1", "I2", "I3", "II1", "II2", "II3", "III1", "III2", "III3", "IV1", "IV2", "IV3" };
const char* crt = "\n------------------------------------------------\n";

int getRazred(const char* razred) {

	if (razred[1] == 'V')
		return 4;

	int i = 0;
	while (razred[i] == 'I') {
		i++;	
	}
	return i;
}
template<class T1, class T2>
class Kolekcija {
	T1 * _elementi1;
	T2 * _elementi2;
	int _trenutno;
public:
	bool RemoveElement1ByValue(T1& el1) {
		bool flag = false;
		for (int i = 0; i < _trenutno; i++) {
			if (el1 == _elementi1[i]) {
				RemoveElement(i);
				i--;
				flag = true;
			}
		}
		return flag;
	}
	Kolekcija(const Kolekcija& k) {
		_trenutno = k._trenutno;
		_elementi1 = new T1[_trenutno];
		_elementi2 = new T2[_trenutno];
		for (int i = 0; i < _trenutno; i++) {
			_elementi1[i] = k._elementi1[i];
			_elementi2[i] = k._elementi2[i];
		}
	}
	Kolekcija & operator=(const Kolekcija& k) {
		if (this != &k) {
			delete[] _elementi1;
			delete[] _elementi2;
			_trenutno = k._trenutno;
			_elementi1 = new T1[_trenutno];
			_elementi2 = new T2[_trenutno];

			for (int i = 0; i < _trenutno; i++) {
				_elementi1[i] = k._elementi1[i];
				_elementi2[i] = k._elementi2[i];
			}
		}
		return *this;
	}
	void RemoveElement(const int &lokacija) {
		if (lokacija >= _trenutno || lokacija < 0)
			throw exception("Ne postoji ta lokacija", __LINE__);

		for (int i = lokacija; i < _trenutno - 1; i++) {
			_elementi1[i] = _elementi1[i + 1];
			_elementi2[i] = _elementi2[i + 1];
		}
		_trenutno--;
	}
	void AddElement(const T1& el1, const T2& el2) {
		T1* niz1 = new T1[_trenutno + 1];
		T2* niz2 = new T2[_trenutno + 1];

		for (int i = 0; i < _trenutno; i++) {
			niz1[i] = _elementi1[i];
			niz2[i] = _elementi2[i];
		}
		delete[] _elementi1;
		delete[] _elementi2;

		niz1[_trenutno] = el1;
		niz2[_trenutno] = el2;
		_trenutno++;

		_elementi1 = niz1;
		_elementi2 = niz2;
		niz1 = nullptr;
		niz2 = nullptr;
	}
	T1& GetElement1(const int &lokacija)const {
		if (lokacija >= _trenutno || lokacija < 0)
			throw exception("Ne postoji ta lokacija", __LINE__);
		return _elementi1[lokacija];
	}
	T2& GetElement2(const int& lokacija)const {
		if (lokacija >= _trenutno || lokacija < 0)
			throw exception("Ne postoji ta lokacija", __LINE__);
		return _elementi2[lokacija];
	}
	int GetTrenutno() const { return _trenutno; }
	friend ostream& operator<<(ostream& COUT, const Kolekcija& k) {
		for (int i = 0; i < k.GetTrenutno(); i++) {
			COUT << k.GetElement1(i) << " " << k.GetElement2(i) << endl;
		}
		return COUT;
	}
	Kolekcija()
	{
		_elementi1 = nullptr;
		_elementi2 = nullptr;
		_trenutno = 0;
	}
	~Kolekcija()
	{
		delete[]_elementi1;
		delete[]_elementi2;
	}
};
class Datum {
	int *_dan, *_mjesec, *_godina;
public:

	Datum & operator=(const Datum& datum) {
		if (this != &datum) {
			*_dan = *datum._dan;
			*_mjesec = *datum._mjesec;
			*_godina = *datum._godina;
		}
		return *this;
	}

	Datum(int dan = 1, int mjesec = 1, int godina = 2000) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
	}

	Datum(const Datum&obj) {
		_dan = new int(*obj._dan);
		_mjesec = new int(*obj._mjesec);
		_godina = new int(*obj._godina);
	}

	~Datum() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
	}


	friend ostream& operator<< (ostream &COUT, const Datum &obj) {
		COUT << *obj._dan << " " << *obj._mjesec << " " << *obj._godina;
		return COUT;
	}
};
bool ProvjeriValidnostBrojaTelefona(string telefon) {//globalna funkcija
													 /*
													 broj telefona treba biti u formatu: +387(61)-222-333
													 */
	string pravilo = "(\\+)(\\d{3})(\\()(\\d{2})(\\))(\\-)(\\d{3})(\\-)(\\d{3})";
	regex obj(pravilo);
	return regex_match(telefon, obj);
}
class Osoba {
protected:
	char * _imePrezime;
	Datum * _datumRodjenja;
	string _brojTelefona;
public:
	Osoba(const char * imePrezime, Datum datum) {
		_imePrezime = new char[strlen(imePrezime) + 1];
		strcpy_s(_imePrezime, strlen(imePrezime) + 1, imePrezime);
		_datumRodjenja = new Datum(datum);
		_brojTelefona = "";

	}
	Osoba(const Osoba & obj) :_brojTelefona(obj._brojTelefona) {
		_imePrezime = new char[strlen(obj._imePrezime) + 1];
		strcpy_s(_imePrezime, strlen(obj._imePrezime) + 1, obj._imePrezime);
		_datumRodjenja = new Datum(*obj._datumRodjenja);
	}
	~Osoba() { delete[]_imePrezime; delete _datumRodjenja; }

	Osoba& operator=(const Osoba& osoba) {
		if (this != &osoba) {
			delete[] _imePrezime;
			int vel = strlen(osoba._imePrezime) + 1;
			_imePrezime = new char[vel];
			strcpy_s(_imePrezime, vel, osoba._imePrezime);
			_brojTelefona = osoba._brojTelefona;
			*_datumRodjenja = *osoba._datumRodjenja;
		}
		return *this;
	}

	bool setBrojTelefona(string brojTelefona) {
		if (ProvjeriValidnostBrojaTelefona(brojTelefona)) {
			_brojTelefona = brojTelefona;
			return true;
		}
		return false;
	}

};

class Nastavnik :public Osoba {
	Kolekcija<Predmeti, Razredi> * _predmetiRazredi;
public:
	bool isNastavnik(Predmeti p, Razredi r) {
		for (int i = 0; i < _predmetiRazredi->GetTrenutno(); i++) {
			if (_predmetiRazredi->GetElement1(i) == p && _predmetiRazredi->GetElement2(i) == r)
				return true;
		}
		return false;
	}
	const char* getImePrezime()const { return _imePrezime; }
	Kolekcija<Predmeti, Razredi>& getPredmetiRazredi() const {
		return *_predmetiRazredi;
	}
	Nastavnik & operator=(const Nastavnik& n) {
		Osoba::operator=(n);
		*_predmetiRazredi = *n._predmetiRazredi;
		return *this;
	}
	bool operator==(const Nastavnik& n) {
		//return _brojTelefona == n._brojTelefona;
		if (_brojTelefona != "" && n._brojTelefona != "") {
			if (_brojTelefona == n._brojTelefona)
				return true;
		}
		else if (strcmp(_imePrezime, n._imePrezime) == 0)
			return true;

		return false;
	}
	Nastavnik(const Nastavnik& n) :Osoba(n) {
		_predmetiRazredi = new Kolekcija<Predmeti, Razredi>;
		for (int i = 0; i < _predmetiRazredi->GetTrenutno(); i++) {
			_predmetiRazredi->AddElement(n._predmetiRazredi->GetElement1(i), n._predmetiRazredi->GetElement2(i));
		}
	}
	Nastavnik(const char* imePrezime, const Datum& d) :Osoba(imePrezime, d) {
		_predmetiRazredi = new Kolekcija<Predmeti, Razredi>;  
	}
	bool AddPredmetRazred(Predmeti p, Razredi r) {
		/*NASTAVNIK MOZE PREDAVATI ISTI PREDMET,
		ALI TO MORA BITI U RAZLICITIM ODJELJENJIMA I NAJVISE U DVA RAZREDA
		(NA DVIJE RAZLICITE GODINE)*/
		int razredi[4] = { 0 };
		for (int i = 0; i < _predmetiRazredi->GetTrenutno(); i++) {
			if (_predmetiRazredi->GetElement1(i) == p) {
				if (_predmetiRazredi->GetElement2(i) == r)
					return false;
				razredi[getRazred(ispisRazredi[_predmetiRazredi->GetElement2(i)]) - 1]++;
			}
		}
		if (razredi[getRazred(ispisRazredi[r]) - 1] == 2)
			return false;

		_predmetiRazredi->AddElement(p, r);
		return true;
	}
	bool RemovePredmetRazred(Predmeti p) {
		return _predmetiRazredi->RemoveElement1ByValue(p);
	}
	friend ostream& operator<<(ostream& COUT, const Nastavnik& n) {
		COUT <<"Nastavnik: "<< n._imePrezime << endl;
		COUT << *n._predmetiRazredi << endl;
		return COUT;
	}
};
class Ucenik : public Osoba {
	int _brojUDnevniku;
	Razredi _razred;
	vector<Nastavnik *> _nastavnici;
	Kolekcija<Predmeti, int> _predmetiOcjene;
public:
	friend ostream& operator<<(ostream& COUT, const Ucenik& ucenik) {
		COUT << "Broj u dnevniku: " << ucenik._brojUDnevniku << endl;
		COUT << "Razred: " << ispisRazredi[ucenik._razred]<<endl;
		for (int i = 0; i < ucenik._nastavnici.size(); i++) {
			COUT << *ucenik._nastavnici[i] << endl;
		}
		COUT << ucenik._predmetiOcjene << endl;
		return COUT;
	}
	Ucenik(const Ucenik& u):Osoba(u) {
		_brojUDnevniku = u._brojUDnevniku;
		_razred = u._razred;
		_predmetiOcjene = u._predmetiOcjene;
		_nastavnici = u._nastavnici;
	}
	float GetProsjekByNastavnik(const char* imePrezime) {
		float suma = 0;
		int br = 0;
		for (int i = 0; i < _predmetiOcjene.GetTrenutno(); i++) {
			for (int j = 0; j < _nastavnici.size(); j++) {
				if (strcmp(_nastavnici[j]->getImePrezime(), imePrezime) == 0) {
					if (_nastavnici[j]->isNastavnik(_predmetiOcjene.GetElement1(i), _razred)) {
						suma += _predmetiOcjene.GetElement2(i);
						br++;
					}
				}
			}
		}
		if (br != 0)
			return suma / br;
		return -1;
	}
	vector<Nastavnik*>& getNastavnici() {
		return _nastavnici;
	}
	Kolekcija<Predmeti, int>& getPredmetiOcjene() {
		return _predmetiOcjene;
	}
	bool AddPredmetOcjenu(Predmeti p, const int& ocjena) {
		//	DA BI SE DODALA OCJENA ZA ODREDJENI PREDMET UCENIK MORA POSJEDOVATI NASTAVNIKA KOJI PREDAJE TAJ PREDMET*/
		if (ocjena > 5 || ocjena < 1)
			return false;

		for (int i = 0; i < _nastavnici.size(); i++) {
			for (int j = 0; j < _nastavnici[i]->getPredmetiRazredi().GetTrenutno(); j++) {
				if (_nastavnici[i]->getPredmetiRazredi().GetElement1(j) == p) {
					_predmetiOcjene.AddElement(p, ocjena);
					return true;
				}
			}
		}
		return false;
	}
	Ucenik(const char* imePrezime, const Datum& datum, const int& brojUDnevniku, Razredi r) :Osoba(imePrezime, datum),
		_brojUDnevniku(brojUDnevniku), _razred(r) {
	}
	bool AddNastavnik(const Nastavnik& nastavnik) {
		//	VODITI RACUNA DA SE DODAJU REFERENCE NA NASTAVNIKE KAKO BI SVI UCENICI DIJELILI ISTE
		//	INFORMACIJE O NASTAVNICIMA U SLUCAJU DA SE NASTAVNIKU DODA NEKI PREDMET*/
		//	ZA USPJESNO DODAVANJE, NASTAVNIK MORA POSJEDOVATI (PREDAVATI) NAJMANJE JEDAN PREDMET U TOM RAZREDU */
		//	ONEMOGUCITI DODAVANJE ISTIH NASTAVNIKA; POJAM ISTI PODRAZUMIJEVA IDENTICNE VRIJEDNOSTI SVIH ATRIBUTA*/

		for (int i = 0; i < _nastavnici.size(); i++) 
			if (*_nastavnici[i] == nastavnik)
				return false;
		

		for (int i = 0; i < nastavnik.getPredmetiRazredi().GetTrenutno(); i++) {
			if (nastavnik.getPredmetiRazredi().GetElement2(i) == _razred) {
				_nastavnici.push_back(const_cast<Nastavnik*>(&nastavnik));
				return true;
				}
			}
		return false;
	}
};


void main() {

	/****************************************************************************
	1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
	2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR CE BITI OZNACENO KAO "RE"
	3. SPASAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URADJENOG ZADATKA
	4. PROGRAMSKI CODE SE TAKODJER NALAZI U FAJLU CODE_.TXT
	5. NAZIV I LISTA PARAMETARA FUNKCIJA MORAJU BITI IDENTIČNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U.
	6. NIJE POTREBNO BACATI IZUZETKE. SVE FUNKCIJE VRACAJU TRUE ILI FALSE
	****************************************************************************/

#pragma region TestiranjeDatuma
	Datum danas(26, 11, 2015);
	Datum sutra(danas);
	Datum prekosutra;
	prekosutra = danas;
	cout << danas << endl << sutra << endl << prekosutra << crt;
#pragma endregion
#pragma region TestiranjeKolekcije
	Kolekcija<int, int> kolekcija1;
	int brojElemenata = 15;
	for (int i = 0; i < brojElemenata; i++)
		kolekcija1.AddElement(i, i);
	kolekcija1.RemoveElement(0);//uklanja element na osnovu lokacije
	cout << kolekcija1.GetElement1(0) << " " << kolekcija1.GetElement2(0) << endl;
	cout << kolekcija1 << endl;
	Kolekcija<int, int> kolekcija2;
	kolekcija2 = kolekcija1;
	cout << kolekcija2 << crt;
	if (kolekcija1.GetTrenutno() == kolekcija2.GetTrenutno())
		cout << "ISTI BROJ ELEMENATA" << endl;
	Kolekcija<int, int> kolekcija3(kolekcija2);
	cout << kolekcija3 << crt;
#pragma endregion
#pragma region TestiranjeNastavnika
	Nastavnik jasmin("Jasmin Azemovic", Datum(15, 2, 1980));
	Nastavnik adel("Adel", Datum(15, 10, 1981));
	/*NASTAVNIK MOZE PREDAVATI ISTI PREDMET, ALI TO MORA BITI U RAZLICITIM ODJELJENJIMA I NAJVISE U DVA RAZREDA (NA DVIJE RAZLICITE GODINE)*/
	if (jasmin.AddPredmetRazred(Matematika, I1))
		cout << "Predmeti dodan" << endl;
	if (jasmin.AddPredmetRazred(Historija, I1))
		cout << "Predmeti dodan" << endl;

	if (jasmin.AddPredmetRazred(Geografia, I1))
		cout << "Predmeti dodan" << endl;

	if (jasmin.AddPredmetRazred(Geografia, I2))
		cout << "Predmeti dodan" << endl;

	if (jasmin.AddPredmetRazred(Historija, I2))
		cout << "Predmeti dodan" << endl;

	if (jasmin.AddPredmetRazred(Historija, I3))
		cout << "Predmeti dodan" << endl;
	else
		cout << "Nije dodan" << endl;

	if (jasmin.AddPredmetRazred(Historija, I2))
		cout << "Predmeti dodan" << endl;
	else
		cout << "Predaje tom razredu vec taj predmet" << endl;

	if (jasmin.AddPredmetRazred(Geografia, I1))
		cout << "Predmeti dodan" << endl;
	else
		cout << "Predmet nije dodan" << endl;

	if (adel.AddPredmetRazred(Historija, I2))
		cout << "Predmet dodan" << endl;
	
	if (adel.AddPredmetRazred(Historija, III1))
		cout << "Predmet dodan" << endl;

	if (adel.RemovePredmetRazred(Historija))
		cout << "Predmet uklonjen!" << endl;

	if (adel.AddPredmetRazred(Historija, III1))
		cout << "Predmet dodan" << endl;
	if (adel.AddPredmetRazred(Hemija, III1))
		cout << "Predmet dodan" << endl;
	Nastavnik goran(adel);
	if (goran == adel)
		cout << "Nastavnici identicni" << endl;
	goran = jasmin;
	if (goran == jasmin)
		cout << "Nastavnici identicni" << endl;

	Kolekcija<Predmeti, Razredi> & predmetiRazredi = jasmin.getPredmetiRazredi();

	if (!jasmin.setBrojTelefona("+38761111222"))
		cout << "Broj telefona nije dodan!" << endl;
	if (!jasmin.setBrojTelefona("+387-61-111-222"))
		cout << "Broj telefona nije dodan!" << endl;
	if (jasmin.setBrojTelefona("+387(61)-111-222"))
		cout << "Broj telefona uspjesno dodan!" << endl;
#pragma endregion

	//#pragma region TestiranjeUcenika
	Ucenik denis("Denis Music", Datum(8, 10, 1990), 3, III1);
	Ucenik elmin("Elmin Sudic", Datum(15, 6, 1993), 1, I1);
	Ucenik adil("Adil Joldic", Datum(13, 8, 1992), 2, II1);
	//	/*VODITI RACUNA DA SE DODAJU REFERENCE NA NASTAVNIKE KAKO BI SVI UCENICI DIJELILI ISTE
	//	INFORMACIJE O NASTAVNICIMA U SLUCAJU DA SE NASTAVNIKU DODA NEKI PREDMET*/
	//	/*ZA USPJESNO DODAVANJE, NASTAVNIK MORA POSJEDOVATI (PREDAVATI) NAJMANJE JEDAN PREDMET U TOM RAZREDU */
	if (elmin.AddNastavnik(jasmin))
		cout << "Nastavnik uspjesno dodan" << endl;
	if (denis.AddNastavnik(jasmin))
		cout << "Nastavnik uspjesno dodan" << endl;
	else
		cout << "Nastavnik nije uspjesno dodan" << endl;
	if (denis.AddNastavnik(adel))
		cout << "Nastavnik uspjesno dodan" << endl;
	//	/*ONEMOGUCITI DODAVANJE ISTIH NASTAVNIKA; POJAM ISTI PODRAZUMIJEVA IDENTICNE VRIJEDNOSTI SVIH ATRIBUTA*/
	if (denis.AddNastavnik(adel))
		cout << "Nastavnik uspjesno dodan" << endl;
	else
		cout << "Nastavnik nije uspjesno dodan" << endl;
	//	/*DA BI SE DODALA OCJENA ZA ODREDJENI PREDMET UCENIK MORA POSJEDOVATI NASTAVNIKA KOJI PREDAJE TAJ PREDMET*/
	if (denis.AddPredmetOcjenu(Matematika, 3))
		cout << "Ocjena uspjesno dodana" << endl;
	if (denis.AddPredmetOcjenu(Historija, 4))
		cout << "Ocjena uspjesno dodana" << endl;
	if (denis.AddPredmetOcjenu(Historija, 5))
		cout << "Ocjena uspjesno dodana" << endl; 
	if (denis.AddPredmetOcjenu(Historija, 5))
		cout << "Ocjena uspjesno dodana" << endl;
	if (elmin.AddPredmetOcjenu(Matematika, 3))
		cout << "Ocjena uspjesno dodana" << endl;
	if (denis.AddPredmetOcjenu(Hemija, 5))
		cout << "Ocjena uspjesno dodana" << endl;
	
	vector<Nastavnik*> & nastavnici = denis.getNastavnici();
	cout << "Ucenik Denis ima dodijeljena " << nastavnici.size() << " nastavnika" << endl;
	
	Kolekcija<Predmeti, int> & uspjeh = denis.getPredmetiOcjene();
	cout << "Denis ima " << uspjeh.GetTrenutno() << " polozenih predmeta" << endl;
	cout << "Prosjecna ocjena kod nastavnika Adel je " << denis.GetProsjekByNastavnik("Adel") << endl;
	
	Ucenik denis2(denis);
		cout << denis2 << endl;
	
	#pragma endregion
	system("pause");
}
