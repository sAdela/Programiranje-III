#include<iostream>
#include<vector>
#include<exception>
#include<string>
using namespace std;

const char *crt = "\n-------------------------------------------\n";
enum stringFormat { DDMMGG, DDMMGGGG, DDMMGGSSMM, DDMMGGGGSSMM };
enum prikazPoruka { SVE_PORUKE, SAKRIJ_POBRISANE, PRIKAZI_SAMO_POBRISANE };
vector<string> nedozvoljeneRijeci;
/*
DDMMGG - 29.8.17
DDMMGGGG - 29.8.2017
DDMMGGGGSSMM - 29.8.2017 10:15
*/

template<class T1, class T2>
class Kolekcija {
	T1 * _elementi1;
	T2 * _elementi2;
	int * _trenutno;
public:

	//Kolekcija & operator=(const Kolekcija& k) {
	//	if (this != &k) {
	//		
	//	}
	//}

	Kolekcija<T1, T2> operator[](const int& i) {
		if (i < 0 || i >= *_trenutno)
			throw exception("Nema elementa na toj lokaciji", __LINE__);

		return Kolekcija<T1, T2>(_elementi1[i], _elementi2[i]);
	}

	//T1& operator[](const int& i) {
	//	if (i < 0 || i >= *_trenutno)
	//		throw exception("Nema elementa na toj lokaciji", __LINE__);
	//	return _elementi1[i];
	//}


	Kolekcija(T1& el1, T2& el2) {
		_trenutno = new int(1);
		_elementi1 = new T1(el1);
		_elementi2 = new T2(el2);
	}


	Kolekcija()
	{
		_elementi1 = nullptr;
		_elementi2 = nullptr;
		_trenutno = new int(0);
	}

	Kolekcija & operator=(const Kolekcija<T1, T2> & orig)
	{
		if (this != &orig)
		{
			delete[]_elementi1;
			delete[]_elementi2;

			_elementi1 = new T1[*orig._trenutno];
			_elementi2 = new T2[*orig._trenutno];
			*_trenutno = *orig._trenutno;

			for (int i = 0; i < *_trenutno; i++)
			{
				_elementi1[i] = orig._elementi1[i];
				_elementi2[i] = orig._elementi2[i];
			}
		}
		return *this;
	}

	bool AddElement(T1 elem1, T2 elem2)
	{
		T1 * temp1 = new T1[*_trenutno + 1];
		T2 * temp2 = new T2[*_trenutno + 1];

		for (int i = 0; i < *_trenutno; i++) {
			temp1[i] = _elementi1[i];
			temp2[i] = _elementi2[i];
		}

		delete[] _elementi1;
		delete[] _elementi2;

		_elementi1 = temp1;
		_elementi2 = temp2;

		_elementi1[*_trenutno] = elem1;
		_elementi2[*_trenutno] = elem2;
		(*_trenutno)++;
		return true;
	}
	~Kolekcija()
	{
		delete[]_elementi1; _elementi1 = nullptr;
		delete[]_elementi2; _elementi2 = nullptr;
		delete _trenutno; _trenutno = nullptr;
	}

	T1 * getElementi1Pok() const { return _elementi1; }
	T2 * getElementi2Pok() const { return _elementi2; }
	T1 & getElement1(int lokacija) const { return _elementi1[lokacija]; }
	T2 & getElement2(int lokacija) const { return _elementi2[lokacija]; }
	int getTrenutno() const { return *_trenutno; }

	friend ostream & operator<<(ostream & COUT, const Kolekcija<T1, T2> & obj)
	{
		for (size_t i = 0; i < *obj._trenutno; i++)
		{
			COUT << obj.getElement1(i) << " " << obj.getElement2(i) << endl;
		}
		return COUT;
	}
};
class DatumVrijeme {
	int *_dan, *_mjesec, *_godina, *_sati, *_minuti;
public:

	int pretvoriUMinute() {
		return *_minuti + *_sati * 60 + *_dan * 24 * 60;
	}

	int operator-(DatumVrijeme& dat) {
		return abs(this->pretvoriUMinute() - dat.pretvoriUMinute());
	}

	DatumVrijeme & operator=(const DatumVrijeme& dat) {
		if (this != &dat) {
			*_dan = *dat._dan;
			*_mjesec = *dat._mjesec;
			*_godina = *dat._godina;
			*_sati = *dat._sati;
			*_minuti = *dat._minuti;
		}
		return *this;
	}

	DatumVrijeme(const DatumVrijeme& dat) {
		_dan = new int(*dat._dan);
		_mjesec = new int(*dat._mjesec);
		_godina = new int(*dat._godina);
		_sati = new int(*dat._sati);
		_minuti = new int(*dat._minuti);

	}

	string ToString(stringFormat str) {
		/*DDMMGG - 29.8.17
		DDMMGGGG - 29.8.2017
		DDMMGGSSMM - 29.8.17 10:15
		DDMMGGGGSSMM - 29.8.2017 10:15
		*/

		string novi;

		novi += to_string(*_dan) + "." + to_string(*_mjesec) + ".";


		if (int(str) == 0 || int(str == 2)) {
			novi += to_string((*_godina) % 100);
			if (int(str) == 2) {
				novi += " " + to_string(*_sati) + ":" + to_string(*_minuti);
			}
		}
		else {
			novi += to_string(*_godina);
			if (int(str) == 3)
				novi += " " + to_string(*_sati) + ":" + to_string(*_minuti);
		}

		return novi;
	}


	DatumVrijeme(int dan = 1, int mjesec = 1, int godina = 2000, int sati = 0, int minuti = 0) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
		_sati = new int(sati);
		_minuti = new int(minuti);
	}
	~DatumVrijeme() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
		delete _sati; _sati = nullptr;
		delete _minuti; _minuti = nullptr;
	}
	friend ostream & operator<< (ostream & COUT, DatumVrijeme & obj) {
		COUT << *obj._dan << "." << *obj._mjesec << "." << *obj._godina << " " << *obj._sati << ":" << *obj._minuti << endl;
		return COUT;
	}
};
class Poruka {
	string _posiljalac;
	string _primalac;
	string _sadrzaj;
	DatumVrijeme _vrijeme;
public:
	Poruka(const Poruka& poruka) :_vrijeme(poruka._vrijeme) {
		_posiljalac = poruka._posiljalac;
		_primalac = poruka._primalac;
		_sadrzaj = poruka._sadrzaj;
	}

	DatumVrijeme& getDatumVrijeme() {
		return _vrijeme;
	}

	Poruka& operator=(const Poruka& poruka) {
		if (this != &poruka) {
			_posiljalac = poruka._posiljalac;
			_primalac = poruka._primalac;
			_sadrzaj = poruka._sadrzaj;
			_vrijeme = poruka._vrijeme;
		}
		return *this;
	}

	Poruka() {
		_posiljalac = "";
		_primalac = "";
		_sadrzaj = "";
	}

	Poruka(string posiljalac, string primalac, string sadrzaj, DatumVrijeme vrijeme) :_vrijeme(vrijeme)
	{
		_posiljalac = posiljalac;
		_primalac = primalac;
		_sadrzaj = sadrzaj;
	}
	friend ostream & operator<< (ostream & COUT, Poruka & obj) {
		COUT << "(" << obj._vrijeme << ") " << obj._posiljalac << " -> ";
		COUT << obj._sadrzaj;
		return COUT;
	}
	string getPrimalac() { return _primalac; }
	string getPosiljalac() { return _posiljalac; }
	string getSadrzaj() { return _sadrzaj; }
};
class Komunikacija {
	string _naslov;
	int _ocjena; //ocjena komunikacije 1 - 5 se automatski izracunava
	Kolekcija<Poruka, bool> _poruke;//bool se odnosi na podatak da li je poruka pobrisana tj. nece biti vidljiva u prikazu ukoliko se drugacije ne navede
public:

	vector<Poruka*> getVektorPoruka(string username) {
		vector<Poruka*> vektorPoruke;
		for (int i = 0; i < _poruke.getTrenutno(); i++) {
			if (_poruke.getElement1(i).getPrimalac() == username) {
				vektorPoruke.push_back(&_poruke.getElement1(i));
			}
		}
		return vektorPoruke;
	}

	Komunikacija(const Komunikacija& k) {
		_naslov = k._naslov;
		_ocjena = k._ocjena;
		_poruke = k._poruke;
	}
	Komunikacija & operator=(Komunikacija& k) {
		if (this != &k) {
			_naslov = k._naslov;
			_ocjena = k._ocjena;
			_poruke = k._poruke;
		}
		return *this;
	}
	void DodajPoruku(const Poruka& poruka) {
		_poruke.AddElement(poruka, false);
	}
	Komunikacija(string naslov = "") {
		_naslov = naslov;
		_ocjena = -1;
	}
	Komunikacija(string naslov, const Poruka&poruka) {
		_naslov = naslov;
		_ocjena = -1;
		_poruke.AddElement(poruka, false);
	}

	friend ostream & operator<< (ostream & COUT, Komunikacija & obj) {
		COUT << "(" << obj._ocjena << ") " << obj._naslov << " -> ";
		for (int i = 0; i < obj._poruke.getTrenutno(); i++)
		{
			COUT << obj._poruke[i] << endl;
		}
		return COUT;
	}
	Kolekcija<Poruka, bool> * getPoruke() { return &_poruke; }
	int &getOcjena() { return _ocjena; }
	string getNaslov() { return _naslov; }
};

class Korisnik {
	string _korisnickoIme;
	char * _imePrezime;
	//char * - se odnosi na naziv predmeta ili tema gdje će se čuvati kompletna komunikacija sa nastavnim osobljem ili korisnikom na određenom predmetu/temi
	Kolekcija<char *, Komunikacija> _komunikacija;
public:

	void OcijeniKomunikaciju(string naslov) {
		//*formira ocjenu na nivou komunikacije na nacin da izracunava prosjecno vrijeme odgovora drugog ucesnika
		//izrazeno u minutama i to prema sljedecoj skali
		//prosjek > 20 minuta = ocjena 1
		//prosjek > 15 minuta = ocjena 2
		//prosjek > 10 minuta = ocjena 3
		//prosjek > 5 minuta = ocjena 4
		//prosjek <=5 minuta = ocjena 5
		//*/



		//U nizu poruka koji posalje posiljatelj bez odgovora primaoca, razmatram zadnju poruku posiljatelja
		//i zatim prvu poruku tj prvi odgovor primatelja (odziv)

		Komunikacija* k = PronadiNaslovKomunikacije(naslov);
		string zapamti;
		float prosjek = 0;
		int brojac = 0;
		if (k != nullptr) {
			for (int i = 0; i < k->getPoruke()->getTrenutno(); i++) {
				if (k->getPoruke()->getElement1(i).getPosiljalac() == _korisnickoIme) {
					zapamti = k->getPoruke()->getElement1(i).getPrimalac();
					if (i != k->getPoruke()->getTrenutno() - 1) {
						if (k->getPoruke()->getElement1(i + 1).getPosiljalac() == _korisnickoIme && k->getPoruke()->getElement1(i + 1).getPrimalac() == zapamti)
							continue;
					}
					int b = 0;
					for (int j = i; j < k->getPoruke()->getTrenutno(); j++) {
						if (k->getPoruke()->getElement1(j).getPosiljalac() == zapamti && k->getPoruke()->getElement1(j).getPrimalac() == _korisnickoIme) {
							prosjek += k->getPoruke()->getElement1(j).getDatumVrijeme() - k->getPoruke()->getElement1(i).getDatumVrijeme();
							brojac++;
							b++;

						}
						if (b > 0) break;
					}
				}
			}
		}
		prosjek /= brojac;
		if (prosjek <= 5)
			k->getOcjena() = 5;
		else if (prosjek > 5 && prosjek < 10)
			k->getOcjena() = 4;
		else if (prosjek > 10 && prosjek < 15)
			k->getOcjena() = 3;
		else if (prosjek > 15 && prosjek < 20)
			k->getOcjena() = 2;
		else
			k->getOcjena() = 1;

		cout << endl << k->getOcjena() << " je ocjena komunikacije " << endl;
	}

	int PrikaziKomunikacijuSaKorisnikom(string username) {

		//*funkcija prikazuje sve poruke sa korisnikom cije korisnicko ime je definisano parametrom,
		//te vraca ukupan broj (razmijenjenih poruka sa tim korisnikom)*/
		vector<Poruka*> vektorPoruka;
		int brojac = 0;
		for (int i = 0; i < _komunikacija.getTrenutno(); i++) {
			vektorPoruka = _komunikacija.getElement2(i).getVektorPoruka(username);

			for (int j = 0; j < vektorPoruka.size(); j++)
				cout << *vektorPoruka[j] << endl;

			brojac += vektorPoruka.size();
		}

		return brojac;
	}

	void PrikaziKomunikacijuPoNaslovu(string naslov, prikazPoruka prikaz) {
		//*ispisuje sve poruke koje je korisnik razmijenio pod naslovom definisanim parametrom. ispis komunikacije
		//treba biti organizovan po datumu na nacin da se prvo prikaze datum, 
		//a nakon toga sve poruke koje su razmijenjene tog datuma.
		//Na mjestima pobrisanih poruka prikazati tekst "PORUKA IZBRISANA"
		//*/
		Komunikacija* k = PronadiNaslovKomunikacije(naslov);
		if (k != nullptr) {
			for (int i = 0; i < k->getPoruke()->getTrenutno(); i++) {
				cout << "Datum: " << k->getPoruke()->getElement1(i).getDatumVrijeme() << endl;
				cout << "Sadrzaj: ";
				if (k->getPoruke()->getElement2(i) == true)
					cout << "PORUKA IZBRISANA" << endl;

				if (int(prikaz) == 0)
					cout << k->getPoruke()->getElement1(i).getSadrzaj() << endl;

				else if (int(prikaz) == 1) {
					if (!k->getPoruke()->getElement2(i))
						cout << k->getPoruke()->getElement1(i).getSadrzaj() << endl;
				}
				else {
					if (k->getPoruke()->getElement2(i))
						cout << k->getPoruke()->getElement1(i).getSadrzaj() << endl;
				}
			}
		}

	}
	Komunikacija * PronadiNaslovKomunikacije(string naslov) {
		for (int i = 0; i < _komunikacija.getTrenutno(); i++) {
			if (_komunikacija.getElement2(i).getNaslov() == naslov) {
				return &_komunikacija.getElement2(i);
			}
		}
		return nullptr;
	}
	Korisnik(const char * korisnickoIme, const char * imePrezime)
	{
		int vel = strlen(imePrezime) + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, imePrezime);
		_korisnickoIme = korisnickoIme;
	}
	Korisnik(Korisnik & original) :_komunikacija(original._komunikacija)
	{
		int vel = strlen(original._imePrezime) + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, original._imePrezime);
		_korisnickoIme = original._korisnickoIme;
	}

	~Korisnik()
	{
		delete[] _imePrezime; _imePrezime = nullptr;
	}
	friend ostream & operator<< (ostream &COUT, Korisnik &obj)
	{
		COUT << obj._imePrezime << endl << obj._komunikacija << endl;
		return COUT;
	}
	Kolekcija<char*, Komunikacija> * GetKomunikacija() { return &_komunikacija; }
	string getKorisnickoIme() { return _korisnickoIme; }
};

char* AlocirajNizKaraktera(const char* sadrzaj) {
	if (sadrzaj == nullptr)
		return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char* temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	return temp;
}

void PosaljiPoruku(Korisnik** korisnici, int max, string naslov, string korisnikA, string korisnikB, string poruka, DatumVrijeme& datum) {
	//sve poruke se cuvaju u komunikaciji posiljaoca i primaoca tako da u svakom momentu oba ucesnika
	//u komunikaciji posjeduju kompletnu historiju poruka.
	//poruke se grupisu na osnovu naslova, pa ce poruke pod naslovom "Sastanak"
	//izmedju dva korisnika sadrzavati sve poruke koje su razmijenjene na tu temu
	//u slucaju da posiljalac ili primalac ne postoje funkcija treba baciti izuzetak
	//sa odgovarajucom porukom. takodjer, koristeci regex sve poruke koje sadrze neku od zabranjenih rijeci trebaju biti oznacene kao
	//*/
	bool flag = false;
	Poruka pravaPoruka(korisnikA, korisnikB, poruka, datum);
	for (int i = 0; i < max; i++) {
		if (korisnici[i]->getKorisnickoIme() == korisnikA || korisnici[i]->getKorisnickoIme() == korisnikB) {
			flag = true;
			Komunikacija* temp = korisnici[i]->PronadiNaslovKomunikacije(naslov);
			if (temp != nullptr) {
				temp->DodajPoruku(Poruka(korisnikA, korisnikB, poruka, datum));
			}
			else {
				korisnici[i]->GetKomunikacija()->AddElement(AlocirajNizKaraktera(naslov.c_str()), Komunikacija(naslov, pravaPoruka));
			}

		}
	}
	if (!flag) throw exception("Ne postoji korisnik A!");

}

void main()
{

	/****************************************************************************
	1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
	2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR ĆE BITI OZNACENO KAO "RE"
	3. SPAŠAVAJTE PROJEKAT KAKO BI SE SPRIJEČILO GUBLJENJE URAĐENOG ZADATKA
	4. PROGRAMSKI CODE SE TAKOĐER NALAZI U FAJLU CODE.TXT
	5. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTIČNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U, OSIM U SLUČAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE, POMOĆNE FUNKCIJE MOŽETE IMENOVATI I DODAVATI PO ŽELJI.
	6. IZUZETAK BACITE U FUNKCIJAMA U KOJIMA JE TO NAZNAČENO.
	****************************************************************************/


	///*riječi koje su zabranjene u komunikaciji*/
	nedozvoljeneRijeci.push_back("ubiti");
	nedozvoljeneRijeci.push_back("mrzim");
	nedozvoljeneRijeci.push_back("rat");

	DatumVrijeme temp,
		datum19062017_1015(19, 6, 2017, 10, 15),
		datum19062017_1020(19, 6, 2017, 10, 30),
		datum19062017_1021(19, 6, 2017, 10, 21),
		datum19062017_1030(19, 6, 2017, 10, 30);

	cout << datum19062017_1015.ToString(DDMMGGGG) << endl;//vraca string: 19.6.2017
	cout << datum19062017_1015.ToString(DDMMGGGGSSMM) << endl;//vraca string: 19.6.2017 10:15
	cout << datum19062017_1015.ToString(DDMMGGSSMM) << endl;

	const int max = 3;
	Korisnik * korisnici[max];
	korisnici[0] = new Korisnik("jasmin", "Jasmin Azemovic");
	korisnici[1] = new Korisnik("adel", "Adel Handzic");
	korisnici[2] = new Korisnik("denis", "Denis Music");

	///*
	//sve poruke se cuvaju u komunikaciji posiljaoca i primaoca tako da u svakom momentu oba ucesnika
	//u komunikaciji posjeduju kompletnu historiju poruka.
	//poruke se grupisu na osnovu naslova, pa ce poruke pod naslovom "Sastanak"
	//izmedju dva korisnika sadrzavati sve poruke koje su razmijenjene na tu temu
	//u slucaju da posiljalac ili primalac ne postoje funkcija treba baciti izuzetak
	//sa odgovarajucom porukom. 
	//*/

	PosaljiPoruku(korisnici, max, "Sastanak", korisnici[0]->getKorisnickoIme(),
		korisnici[1]->getKorisnickoIme(),
		"Danas imamo sastanak u 10h!", datum19062017_1015);

	PosaljiPoruku(korisnici, max, "Sastanak",
		korisnici[1]->getKorisnickoIme(), korisnici[0]->getKorisnickoIme(),
		"Naravno, vidimo se u sali za sastanke!", datum19062017_1020);

	PosaljiPoruku(korisnici, max, "Sastanak",
		korisnici[0]->getKorisnickoIme(), korisnici[1]->getKorisnickoIme(),
		"Sa sobom ponesi radni materijal!", datum19062017_1021);


	//----------------------------------------------------------
	PosaljiPoruku(korisnici, max, "Sastanak",
		korisnici[1]->getKorisnickoIme(), korisnici[0]->getKorisnickoIme(),
		"Naravno, vidimo se u sali za sastanke!", datum19062017_1030);


	DatumVrijeme datum19062017_2015(19, 6, 2017, 20, 15);
	DatumVrijeme datum19062017_2215(19, 6, 2017, 22, 15);


	PosaljiPoruku(korisnici, max, "Sastanak", korisnici[0]->getKorisnickoIme(),
		korisnici[1]->getKorisnickoIme(),
		"Danas imamo sastanak u 10h!", datum19062017_2015);


	PosaljiPoruku(korisnici, max, "Sastanak",
		korisnici[1]->getKorisnickoIme(), korisnici[0]->getKorisnickoIme(),
		"Naravno, vidimo se u sali za sastanke!", datum19062017_2015);


	///*ispisuje sve poruke koje je korisnik razmijenio pod naslovom definisanim parametrom. ispis komunikacije
	//treba biti organizovan po datumu na nacin da se prvo prikaze datum, a nakon toga sve poruke koje su razmijenjene tog datuma.
	//Na mjestima pobrisanih poruka prikazati tekst "PORUKA IZBRISANA"
	//*/
	korisnici[0]->PrikaziKomunikacijuPoNaslovu("Sastanak", SVE_PORUKE);

	///*funkcija prikazuje sve poruke sa korisnikom cije korisnicko ime je definisano parametrom, te vraca ukupan broj (razmijenjenih poruka sa tim korisnikom)*/
	int ukupnoPoruka = korisnici[0]->PrikaziKomunikacijuSaKorisnikom("adel");

	cout << "Broj razmjenjenih poruka izmedu odabranih korisnika je: " << ukupnoPoruka << endl;
	//*formira ocjenu na nivou komunikacije na nacin da izracunava prosjecno vrijeme odgovora drugog ucesnika
	//izrazeno u minutama i to prema sljedecoj skali
	//prosjek > 20 minuta = ocjena 1
	//prosjek > 15 minuta = ocjena 2
	//prosjek > 10 minuta = ocjena 3
	//prosjek > 5 minuta = ocjena 4
	//prosjek <=5 minuta = ocjena 5
	//*/
	korisnici[0]->OcijeniKomunikaciju("Sastanak");

	for (size_t i = 0; i < max; i++)
	{
		delete korisnici[i];
		korisnici[i] = nullptr;
	}

	system("PAUSE");

}
